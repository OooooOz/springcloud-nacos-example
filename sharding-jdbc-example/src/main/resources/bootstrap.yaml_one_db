server:
  port: 8089

spring:
  main:
    # 分表时，一个实体类对应两张表，避免启动保错
    allow-bean-definition-overriding: true
  application:
    name: sharding-jdbc-example
  #
  # 可以在nacos中配置：一个库进行分表
  #  shardingsphere:
  #    datasource:
  #      # 配置数据源，给数据源起名称
  #      names: m1
  #      m1:
  #        type: com.alibaba.druid.pool.DruidDataSource
  #        driver-class-name: com.mysql.cj.jdbc.Driver
  #        url: jdbc:mysql://localhost:3306/cloud?characterEncoding=utf8&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC
  #        username: root
  #        password: 123456
  #    sharding:
  #      tables:
  #        course:
  #          #指定course表分布情况，配置表在哪个数据库里面，表名称都是什么  m1.course_1 , m1.course_2
  #          actual-data-nodes: m1.course_$->{1..2}
  #          # c_id 生成策略  SNOWFLAKE
  #          key-generator:
  #            column: c_id
  #            type: SNOWFLAKE
  #          table-strategy:
  #            # 指定分片策略  约定c_id值偶数添加到course_1表，如果c_id是奇数添加到course_2表
  #            inline:
  #              sharding-column: c_id
  #              algorithm-expression: course_$->{c_id % 2 + 1}
  #    props:
  #      sql:
  #        # 打开sql输出日志
  #        show: true
  cloud:
    nacos:
      # 配置
      config:
        # Nacos地址
        server-addr: 127.0.0.1:8848
        namespace: dev  # 命名空间，填ID
        file-extension: yaml
      discovery:
        # Nacos地址
        server-addr: 127.0.0.1:8848
        namespace: dev  # 命名空间，填ID

#mybatis:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl